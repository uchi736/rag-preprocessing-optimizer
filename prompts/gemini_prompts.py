"""
Gemini API用のプロンプトテンプレート
"""

# 表の解析用プロンプト
TABLE_PROMPT = """この表を詳細に解析してください。

以下の形式で出力してください：
1. 表の構造（行数、列数、ヘッダー）
2. 表の内容を完全にMarkdown形式で再現
3. 重要なデータポイントの要約

必ずMarkdown形式の表として出力してください。"""

# 図・フローチャートの解析用プロンプト
FIGURE_PROMPT = """この図を詳細に解析してください。

以下を含めて説明してください：
1. 図の種類（フローチャート、ブロック図、グラフなど）
2. 図に含まれる要素とその関係性
3. 図が示す主要な情報やプロセス
4. 図中のすべてのテキスト情報

構造化された形式で出力してください。"""

# 画像の解析用プロンプト
IMAGE_PROMPT = """この画像を詳細に解析してください。

以下を含めて説明してください：
1. 画像の内容と種類
2. 画像に含まれるテキスト情報（すべて抽出）
3. 画像が伝える主要な情報
4. 技術的な詳細があれば記載

すべての情報を漏れなく抽出してください。"""

# ページ全体の解析用プロンプト
FULL_PAGE_PROMPT = """このページを詳細に解析してください。

以下の指示に従って内容を抽出してください：
1. ページ内のすべてのテキストを正確に抽出
2. 表がある場合はMarkdown形式で再現
3. 図やフローチャートがある場合は構造と関係性を説明
4. 画像がある場合は内容を詳細に記述
5. レイアウトや配置の重要な情報も含める

すべての情報を構造化して出力してください。"""

# ハイブリッド処理用プロンプト（表やフローチャートに重点）
HYBRID_PAGE_PROMPT = """このページの表やフローチャートを重点的に解析してください。

特に以下の点に注意してください：
1. 表の完全な構造とデータ
2. フローチャートのノードと接続関係
3. ブロック図の階層構造
4. 図表間の関係性
5. キャプションや説明文

構造と関係性を明確に説明してください。"""


def get_prompt(content_type: str, context: str = None) -> str:
    """
    コンテンツタイプに応じたプロンプトを取得
    
    Args:
        content_type: コンテンツのタイプ
        context: 追加のコンテキスト情報
        
    Returns:
        適切なプロンプト文字列
    """
    prompts = {
        'table': TABLE_PROMPT,
        'figure': FIGURE_PROMPT,
        'image': IMAGE_PROMPT,
        'full_page': FULL_PAGE_PROMPT,
        'hybrid_page': HYBRID_PAGE_PROMPT,
    }
    
    base_prompt = prompts.get(content_type, FULL_PAGE_PROMPT)
    
    if context:
        return f"{context}\n\n{base_prompt}"
    
    return base_prompt